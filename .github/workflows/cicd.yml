#워크플로우의 이름 지정
name: CICD 
#on
#워크플로우가 실행되는 조건
#push
#코드가 repo에 push될 때 실행된다.
#branches: [ main ]
#main 브랜치에 코드가 푸쉬될때만 실행한다.
on:
  push:
    branches: [ main ]

#jobs
#워크플로우 내에서 수행할 작업을 정의하는 부분
#여러개의 작업을 설정할 수 있으며, 작업은 병렬 또는 순차적으로 실행가능
#build
#워크플로우에서 하나의 작업을 의미한다.
#runs-on
#작업이 실행되는 환경을 정의하는 키워드
#이 워크플로우는 최신버전의 Ubuntu 리눅스 환경에서 실행된다.
#Github Action는 다양한 실행환경을 제공하고 있다.
jobs:
  build:
    runs-on: ubuntu-latest #실행 환경 지정

# 실행 스텝 지정
#steps
#각 작업 내의 실행되는 단계를 정의하는 섹션이다.
#각 단계에서는 실할 할 명령이나 액션을 정의 할 수 있다.
#uses
#외부 액션이나 Github에서 제공하는 공식 액션을 가져와서 실행한다.
#actions/checkout
#Github 레포지토리의 소스코드를 워크플로우 실행환경에 다운로드 하는 역할을 한다.
#actions/setup-java
#Java 환경을 설정하는 액션이다.
#이 액션은 Java 개발 환경을 설정한다.
#distribution :corretto
#AWS에서 제공하는 자바 배포판
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Get current time
        uses: josStorer/get-current-time@v2.0.2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"
      
      #빌드된 파일을 저장하고 환경변수를 설정하는 단계
      - name: Set artifact
        run: echo "artifact=$(ls ./build/libs)" >> $GITHUB_ENV

      #AWS 일래스틱 빈스토크에 애플리케이션을 배포하는 단계이다.
      #einaregilsson/beanstalk-deploy@v20 -> 액션을 이용하여 환경에 배포를 한다.
      - name: Beanstalk Deploy
        uses: einaregilsson/beanstalk-deploy@v20
        with: 
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: springboot-develope1
          environment_name: Springboot-develope-env1
          version_label: github-action-${{steps.current-time.outputs.formattedTime}}
          region: ap-northeast-2
          deployment_package: ./build/libs/${{env.artifact}}